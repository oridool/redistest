plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "io.freefair.lombok" version "6.4.1"
	id 'com.google.cloud.tools.jib' version '3.2.0'
}

group = 'org.redistest'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-oauth2-jose'
	implementation 'org.apache.commons:commons-pool2:2.11.1'
	implementation 'org.bouncycastle:bc-fips:1.0.2.1'
	implementation 'org.bouncycastle:bctls-fips:1.0.12.2'
	implementation 'redis.clients:jedis'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}

jib {
	System.setProperty('jib.console', 'plain')
	String tagVersion = publishedImageTagVersion
	def jibFromUser = project.properties.getOrDefault('jibFromUser', '')
	def jibFromPassword = project.properties.getOrDefault('jibFromPassword', '')
	def jibToUser = project.properties.getOrDefault('jibToUser', '')
	def jibToPassword = project.properties.getOrDefault('jibToPassword', '')
	def publishedImageTagSuffix = project.properties.getOrDefault('publishedImageTagSuffix', '')
	def ECR_PATTERN = '.*ecr.*amazonaws.*'
	if (dockerFromRegistryUrl ==~ ECR_PATTERN || dockerPublishRegistryUrl ==~ ECR_PATTERN) {
		// if AWS ECR, exchange the Key/Secret to User/Pass
		def cmdout = new StringBuilder(), cmderr = new StringBuilder()
		String awsProfile = project.hasProperty('awsProfile') ? "--profile " +  project.properties.get('awsProfile') : (System.getenv('AWS_PROFILE') ? "--profile " + System.getenv('AWS_PROFILE') :  "")

		String awsRegion = project.properties.getOrDefault('awsRegion','eu-west-1')

		println "aws ecr get-login-password --region ${awsRegion} ${awsProfile} "
		def proc = "aws ecr get-login-password --region ${awsRegion} ${awsProfile} ".execute()
		proc.consumeProcessOutput(cmdout, cmderr)
		proc.waitForOrKill(5000)
		//println "out> $cmdout err> $cmderr"
		assert cmderr.isBlank()
		println cmderr.toString()
		assert proc.exitValue() == 0
		if (dockerFromRegistryUrl ==~ ECR_PATTERN) {
			jibFromUser = "AWS"
			jibFromPassword = "${cmdout}"
		}
		if (dockerPublishRegistryUrl ==~ ECR_PATTERN) {
			jibToUser = "AWS"
			jibToPassword = "${cmdout}"
		}
	}
	from {
		image = "${dockerFromRegistryUrl}/${dockerFromImage}"
		auth {
			username = jibFromUser
			password = jibFromPassword
		}
	}
	to {
		image = "${dockerPublishRegistryUrl}/${dockerPublishImageName}"
		tags = [tagVersion+publishedImageTagSuffix]
		auth {
			username = jibToUser
			password = jibToPassword
		}
	}
	container {
		entrypoint = ['/bin/sh', '-c', 'java ${JAVA_OPTS} -cp /app/resources:/app/classes:/app/libs/* org.redistest.RedistestApplication']
	}
}

